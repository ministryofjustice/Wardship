using System.Linq;
using System.Web.Mvc;
using Wardship.Models;
using PagedList;
using TPLibrary.Logger;

namespace Wardship.Controllers
{
    [Authorize]
    [ValidateAntiForgeryTokenOnAllPosts]

    public class WardshipRecordController : Controller
    {
        private readonly ISQLRepository db;
        private readonly ICloudWatchLogger _logger;

        public WardshipRecordController(ISQLRepository repository, ICloudWatchLogger logger)
        {
            db = repository;
            _logger = logger;
        }

        // GET: /Wardship/ using model to return the whole data so we know the number of records and pageing info 
        public ActionResult Index(WardshipRecordVMlistView model)
        {
            var ListofWardships = db.WardshipsGetAll();
            model.WardshipResults = ListofWardships.OrderByDescending(s => s.WardshipCaseID).ToPagedList(model.page ?? 1, 30);// used with paging 

            return View("Index", model);
        }

        // GET: /WardshipRecord/Details/5
        public ActionResult Details(int id)
        {
            WardshipRecord model = db.GetWardshipRecordByID(id);
            return View(model);
        }

        // GET: /WardshipRecord/Create
        public ActionResult Create()
        {

            WardshipRecordCreationModel model = new WardshipRecordCreationModel();

            return View(model);
        }


        // POST: /WardshipRecord/Create
        [HttpPost]
        public ActionResult Create(WardshipRecordCreationModel model, string[] selected)
        {
            if (ModelState.IsValid)
            {
                // Create a new Wardship Record using the data from the model
                // Save the new Wardship Record to the database
                // Redirect the user to the index page

                //Number Logic is in the SQL Repository
                model.wardshipRecord.Username = (User as WardshipRecord.ICurrentUser).DisplayName;
                db.WardshipRecordCreateNew(model.wardshipRecord); //just sending in the wardshipRecord without the dropdown lists

                //Adding Audit for new WardshipRecord Record 
                var Audit = new AuditEvent();

                Audit.EventDate = DateTime.Now;
                Audit.UserID = (User as WardshipRecord.ICurrentUser).DisplayName;
                Audit.idAuditEventDescription = "New Wardship Record Added";
                Audit.RecordChanged = model.wardshipRecord.WardshipRecordNumber;

                db.AddAuditEvent(Audit);
                //
                //Adding the parties to the AR
                return RedirectToAction("Create", "Party", new { id = model.wardshipRecord.wardshipRecordID, initial = true });
            }

            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(WardshipRecordCreationModel model)
        {
            if (ModelState.IsValid)
            {
                var wardshipRecord = new WardshipRecord
                {
                    // Assuming WardshipNumber is auto-generated by the database
                    ChildSurname = model.ChildSurname,
                    ChildForenames = model.ChildForenames,
                    CaseType = "WG", // auto populated 'WG'
                    Type = "Ward", // auto populated 'Ward'
                    Court = model.Court,
                    ChildDateOfBirth = model.ChildDateOfBirth,
                    Gender = model.Gender,
                    DateIssued = model.DateIssued,
                    DistrictJudge = model.DistrictJudge
                };

                dataContext.WardshipRecords.Add(wardshipRecord);
                dataContext.SaveChanges();

                return RedirectToAction("Index");
            }

            // If the model state is not valid, return the view with the model to display validation errors
            return View(model);
        }
    }
}
